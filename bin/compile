#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK == "cedar" ]; then
    echo "Stack cedar not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}

DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"
MONO_VERSION="4.0.1.44"
MONO_VM_BINARY="https://github.com/friism/mono-builder/releases/download/v${MONO_VERSION}/mono-${MONO_VERSION}.tar.gz"
LIBUV_VERSION="1.2.0"
NODE_VERSION="0.11.14"
DNX_VERSION="1.0.0-beta4"

D_FLAGS=""

SRC_DIR=`mktemp -d`
# Move the app source code into temporary src dir using subshell to not leak shopt
(
    shopt -s dotglob
    mv ${BUILD_DIR}/* ${SRC_DIR}
)

mkdir -p ${CACHE_DIR}

echo @ Checking Mono ${MONO_VERSION} cache
MONO_CACHE_LOCATION=${CACHE_DIR}/$STACK/mono-${MONO_VERSION}
conditional_download $MONO_VM_BINARY ${MONO_CACHE_LOCATION}

# Copy mono from cache to where we're building the slug
cp -r ${MONO_CACHE_LOCATION}/mono ${BUILD_DIR}/.
# Mono expects to be running out of /app
ln -s ${BUILD_DIR}/mono /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

echo @ Updating certificates
mozroots --import --sync
echo @ Adding NuGet certificate
yes | certmgr -ssl https://nuget.org
cp -r ~/.config ${BUILD_DIR}/.


echo @ Installing Node
# Install Node and grunt-cli
NODE_CACHE_LOCATION=${CACHE_DIR}/${STACK}/node-${NODE_VERSION}
conditional_download http://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz ${NODE_CACHE_LOCATION}
export PATH="${NODE_CACHE_LOCATION}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
if ! hash grunt 2>/dev/null; then
    npm install -g grunt-cli
fi

echo @ Installing DNX
# Install DNX
# TODO: consider not doing this on every build
export DNX_USER_HOME=${CACHE_DIR}/dnx
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_USER_HOME=$DNX_USER_HOME DNX_BRANCH=v$DNX_VERSION sh
source $DNX_USER_HOME/dnvm/dnvm.sh
dnvm install $DNX_VERSION -a default
dnvm alias default | xargs -i ln -s "$DNX_USER_HOME/runtimes/{} $DNX_USER_HOME/runtimes/default"

# Add DNX to the build output
cp -r ${DNX_USER_HOME} ${BUILD_DIR}/.

echo @ Locating project
DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/.deployment
if [ -n "$PROJECT" ]; then
    PROJECT_JSON_FILE=${SRC_DIR}/${PROJECT}/project.json
    echo "Project file configured in PROJECT environment variable"
elif [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
    PROJECT_JSON_FILE=${SRC_DIR}/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')/project.json
    echo "Project file configured in .deployment file"
else
    PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
    printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
    PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "Building ${PROJECT_JSON_FILE}"

echo @ Updating packages
DNU_CACHE_LOCATION=${CACHE_DIR}/dnu
DNU_PACKAGES_LOCATION=${DNU_CACHE_LOCATION}/.dnx/packages
mkdir -p ${DNU_PACKAGES_LOCATION}
dnu restore $D_FLAGS --packages ${DNU_PACKAGES_LOCATION} ${PROJECT_JSON_FILE}

# Link in the packages dir so that `pack` can find packages 
ln -s ${DNU_CACHE_LOCATION}/.dnx ~/.dnx

echo @ Packaging project
dnu publish --out ${BUILD_DIR} $D_FLAGS --configuration Release ${PROJECT_JSON_FILE}

echo @ Selecting DNX runtime
# TODO: This is not great
# Rename the DNX to `default` so that we know where it's at
# If we don't do this, there's symlink breakage
DNX=$(dnvm alias default)
rm -rf ${BUILD_DIR}/dnx/runtimes/default
mv ${BUILD_DIR}/dnx/runtimes/${DNX} ${BUILD_DIR}/dnx/runtimes/default

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

echo @ Checking LibUV ${LIBUV_VERSION} cache
LIBUV_CACHE_PATH=${CACHE_DIR}/${STACK}/libuv
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/libuv-${LIBUV_VERSION}.tar.gz ${LIBUV_CACHE_PATH}
cp -r ${LIBUV_CACHE_PATH}/libuv ${BUILD_DIR}/.

echo @ Preparing procfile
if [ -e ${SRC_DIR}/Procfile ]; then
    cp ${SRC_DIR}/Procfile ${BUILD_DIR}
else
    ROOTS=`cd ${BUILD_DIR}; find approot/packages/ -name root`
    if [ $( echo "${ROOTS}" | wc -l ) -gt 0 ]; then
	APP_ROOT=$(echo "$ROOTS" | head -1)
	cat << EOT >> ${BUILD_DIR}/Procfile
web: sleep 2d | ./kestrel --configuration Release --server.urls http://+:\$PORT
EOT
    fi
fi
